#include "xmlParser.h"
#include "bci.h"
#include <string.h> 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <dlfcn.h>



int main(){
  char * path = getcwd(NULL,NULL);
  XMLNode xBlaatNode   = XMLNode::openFileHelper("config.xml","blaat");
  XMLNode xEntryNode   = xBlaatNode.getChildNode("chat");
  while ( !xEntryNode.isEmpty() ) {
    const char * host      = (xEntryNode.getChildNode("host").getText());
    const char * ipv4      = (xEntryNode.getChildNode("ipv4").getText());
    const char * ipv6      = (xEntryNode.getChildNode("ipv6").getText());    
    const char * port      = (xEntryNode.getChildNode("port").getText());
    const char * nick      = (xEntryNode.getChildNode("nick").getText());      
    const char * user      = (xEntryNode.getChildNode("user").getText());
    const char * auth      = (xEntryNode.getChildNode("auth").getText());    
    const char * client    = (xEntryNode.getChildNode("client").getText());        
    const char * password  = (xEntryNode.getChildNode("password").getText());
    const char * protocol  = (xEntryNode.getChildNode("protocol").getText());
    const char * realname  = (xEntryNode.getChildNode("realname").getText());
    if(host) printf("%s\n",host);
    if(ipv4) printf("%s\n",ipv4);
    if(ipv6) printf("%s\n",ipv6);
    if(port)printf("%s\n",port);
    if(nick)printf("%s\n",nick);
    if(user)printf("%s\n",user);
    if(auth)printf("%s\n",auth);
    if(password)printf("%s\n",password);
    if(protocol)printf("%s\n",protocol);
    printf("\n\n");
//--
  if (client) {
  void *lib;
  char *libname;
  libname = (char*) malloc (strlen(client) + strlen(path)+ 15);
  sprintf(libname,"%s/clients/lib%s.so",path,client);
  lib = dlopen(libname, RTLD_LAZY);
  if (lib) {
    free(libname);
    libname = NULL;
    bc_id               = (t_f_pcar_v)  dlsym(lib,"bc_id"); 
    if(!bc_id) printf("%s\n",dlerror());
    bc_init             = (t_f_pv_pv)   dlsym(lib,"bc_init"); 
    if(!bc_init) printf("%s\n",dlerror());;

    bc_motd_missing     = (t_f_v_pv)       dlsym(lib,"bc_motd_missing");     
    if(!bc_motd_missing) printf("%s\n",dlerror());
    bc_join             = (t_f_v_1pv4pchar)  dlsym(lib,"bc_join");
    if(!bc_join) printf("%s\n",dlerror());
    bc_nick             = (t_f_v_1pv4pchar)  dlsym(lib,"bc_nick");
    if(!bc_nick) printf("%s\n",dlerror());
    bc_quit             = (t_f_v_1pv4pchar)  dlsym(lib,"bc_quit");
    if(!bc_quit) printf("%s\n",dlerror());
    bc_motd             = (t_f_v_1pv4pchar)  dlsym(lib,"bc_motd");
    if(!bc_motd) printf("%s\n",dlerror());
    bc_motd_begin       = (t_f_v_1pv4pchar)  dlsym(lib,"bc_motd_begin");
    if(!bc_motd_begin) printf("%s\n",dlerror());
    bc_motd_end         = (t_f_v_1pv4pchar)  dlsym(lib,"bc_motd_end");
    if(!bc_motd_end) printf("%s\n",dlerror());
    bc_nickchangefail   = (t_f_v_1pv4pchar)  dlsym(lib,"bc_nickchangefail");
    if(!bc_nickchangefail) printf("%s\n",dlerror());

    bc_message          = (t_f_v_1pv5pchar)  dlsym(lib,"bc_message");
    if(!bc_message) printf("%s\n",dlerror());
    bc_action           = (t_f_v_1pv5pchar)  dlsym(lib,"bc_action"); 
    if(!bc_action) printf("%s\n",dlerror());
    bc_notice           = (t_f_v_1pv5pchar)  dlsym(lib,"bc_notice"); 
    if(!bc_notice) printf("%s\n",dlerror());
    bc_ctcp             = (t_f_v_1pv5pchar)  dlsym(lib,"bc_ctcp");  
    if(!bc_ctcp) printf("%s\n",dlerror());
    bc_mode             = (t_f_v_1pv5pchar)  dlsym(lib,"bc_mode");  
    if(!bc_mode) printf("%s\n",dlerror());
    bc_part             = (t_f_v_1pv5pchar)  dlsym(lib,"bc_part");  
    if(!bc_part) printf("%s\n",dlerror());
    bc_unknown_message  = (t_f_v_1pv5pchar)  dlsym(lib,"bc_unknown_message");
    if(!bc_unknown_message) printf("%s\n",dlerror());

    bc_kick             = (t_f_v_1pv6pchar)  dlsym(lib,"bc_kick");  
    if(!bc_kick) printf("%s\n",dlerror());
    bc_channel_add      = (t_f_v_1pv7pchar)  dlsym(lib,"bc_channel_add");  
    if(!bc_channel_add) printf("%s\n",dlerror());
  } else {
    printf("Unable to load client %s\n",client);
    printf("%s\n",dlerror());
  }
}
//--








    xEntryNode.deleteNodeContent();  
    xEntryNode = xBlaatNode.getChildNode("chat");
  }
  loop:
  char c = getchar();
  if (c!='q') goto loop;
  free(path);
}
