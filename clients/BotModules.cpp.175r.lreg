
;; Function cBotModules::cBotModules(char*, cBot*) (_ZN11cBotModulesC1EPcP4cBot)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_overeager:n_basic_blocks 20 n_edges 28 count 20 (    1)


Pass 0

  Register 58 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 63 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 64 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 67 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 68 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 69 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 72 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 73 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 74 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 77 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 78 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 79 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 82 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 83 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 84 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 87 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 88 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 89 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 91 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 92 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 93 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 94 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 97 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 98 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 102 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 103 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 104 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 105 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 109 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 110 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 111 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 112 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 113 costs: AREG:0 DREG:0 CREG:-1000 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 114 costs: AREG:0 DREG:-1000 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 115 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 116 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 117 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 118 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 119 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 120 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 121 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 122 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 123 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 124 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 125 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 126 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 127 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 128 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 129 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 130 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 131 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 132 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 133 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 134 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 135 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 136 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 137 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 138 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 139 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 140 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 141 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 142 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 143 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 144 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref DIREG, else GENERAL_REGS
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref DIREG, else GENERAL_REGS
  Register 63 pref DIREG, else GENERAL_REGS
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref AREG, else GENERAL_REGS
  Register 67 pref DIREG, else GENERAL_REGS
  Register 68 pref DIREG, else GENERAL_REGS
  Register 69 pref GENERAL_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref AREG, else GENERAL_REGS
  Register 72 pref DIREG, else GENERAL_REGS
  Register 73 pref DIREG, else GENERAL_REGS
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref AREG, else GENERAL_REGS
  Register 77 pref DIREG, else GENERAL_REGS
  Register 78 pref DIREG, else GENERAL_REGS
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref AREG, else GENERAL_REGS
  Register 82 pref DIREG, else GENERAL_REGS
  Register 83 pref DIREG, else GENERAL_REGS
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref AREG, else GENERAL_REGS
  Register 87 pref DIREG, else GENERAL_REGS
  Register 88 pref DIREG, else GENERAL_REGS
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref AREG, else GENERAL_REGS
  Register 92 pref DIREG, else GENERAL_REGS
  Register 93 pref DIREG, else GENERAL_REGS
  Register 94 pref GENERAL_REGS or none
  Register 95 pref GENERAL_REGS or none
  Register 96 pref AREG, else GENERAL_REGS
  Register 97 pref DIREG, else GENERAL_REGS
  Register 98 pref GENERAL_REGS or none
  Register 99 pref AREG, else GENERAL_REGS
  Register 100 pref GENERAL_REGS or none
  Register 101 pref DIREG, else GENERAL_REGS
  Register 102 pref GENERAL_REGS or none
  Register 103 pref AREG, else GENERAL_REGS
  Register 104 pref GENERAL_REGS or none
  Register 105 pref AREG, else GENERAL_REGS
  Register 106 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref DIREG, else GENERAL_REGS
  Register 109 pref AREG, else GENERAL_REGS
  Register 110 pref GENERAL_REGS or none
  Register 111 pref DIREG, else GENERAL_REGS
  Register 112 pref AREG, else GENERAL_REGS
  Register 113 pref CREG, else GENERAL_REGS
  Register 114 pref DREG, else GENERAL_REGS
  Register 115 pref DIREG, else GENERAL_REGS
  Register 116 pref DIREG, else GENERAL_REGS
  Register 117 pref GENERAL_REGS or none
  Register 118 pref GENERAL_REGS or none
  Register 119 pref DIREG, else GENERAL_REGS
  Register 120 pref DIREG, else GENERAL_REGS
  Register 121 pref GENERAL_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref GENERAL_REGS or none
  Register 124 pref GENERAL_REGS or none
  Register 125 pref GENERAL_REGS or none
  Register 126 pref GENERAL_REGS or none
  Register 127 pref GENERAL_REGS or none
  Register 128 pref GENERAL_REGS or none
  Register 129 pref GENERAL_REGS or none
  Register 130 pref GENERAL_REGS or none
  Register 131 pref GENERAL_REGS or none
  Register 132 pref GENERAL_REGS or none
  Register 133 pref GENERAL_REGS or none
  Register 134 pref GENERAL_REGS or none
  Register 135 pref GENERAL_REGS or none
  Register 136 pref GENERAL_REGS or none
  Register 137 pref GENERAL_REGS or none
  Register 138 pref GENERAL_REGS or none
  Register 139 pref GENERAL_REGS or none
  Register 140 pref GENERAL_REGS or none
  Register 141 pref GENERAL_REGS or none
  Register 142 pref GENERAL_REGS or none
  Register 143 pref GENERAL_REGS or none
  Register 144 pref GENERAL_REGS or none
145 registers.

Register 53 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 54 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 55 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 56 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 57 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 58 used 2 times across 2 insns in block 18; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 59 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 60 used 2 times across 3 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 61 used 2 times across 2 insns in block 17; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 62 used 2 times across 3 insns in block 17; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 63 used 2 times across 2 insns in block 16; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 64 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 65 used 2 times across 3 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 66 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 67 used 2 times across 3 insns in block 15; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 68 used 2 times across 2 insns in block 14; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 69 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 70 used 2 times across 3 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 71 used 2 times across 2 insns in block 13; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 72 used 2 times across 3 insns in block 13; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 73 used 2 times across 2 insns in block 12; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 74 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 75 used 2 times across 3 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 76 used 2 times across 2 insns in block 11; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 77 used 2 times across 3 insns in block 11; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 78 used 2 times across 2 insns in block 10; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 79 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 3 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 9; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 82 used 2 times across 3 insns in block 9; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 83 used 2 times across 2 insns in block 8; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 84 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 85 used 2 times across 3 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 86 used 2 times across 2 insns in block 7; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 87 used 2 times across 3 insns in block 7; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 88 used 2 times across 2 insns in block 6; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 89 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 90 used 2 times across 3 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 91 used 2 times across 2 insns in block 5; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 92 used 2 times across 3 insns in block 5; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 93 used 2 times across 2 insns in block 4; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 94 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 95 used 2 times across 3 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 96 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 97 used 2 times across 3 insns in block 3; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 98 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 99 used 2 times across 3 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 100 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 101 used 2 times across 2 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 102 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 103 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS.

Register 104 used 2 times across 6 insns in block 2; set 1 time; crosses 1 call; crosses call with 1 frequency; GENERAL_REGS or none.

Register 105 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 106 used 2 times across 3 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 107 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 108 used 2 times across 2 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 109 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS.

Register 110 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 111 used 2 times across 2 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 112 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 113 used 2 times across 4 insns in block 2; set 1 time; pref CREG, else GENERAL_REGS.

Register 114 used 2 times across 4 insns in block 2; set 1 time; pref DREG, else GENERAL_REGS.

Register 115 used 2 times across 5 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 116 used 2 times across 3 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 117 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 118 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 119 used 2 times across 2 insns in block 3; set 1 time; pref DIREG, else GENERAL_REGS.

Register 120 used 2 times across 2 insns in block 3; set 1 time; pref DIREG, else GENERAL_REGS.

Register 121 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 122 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 123 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 124 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 125 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 126 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 127 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 128 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 129 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 130 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 131 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 132 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 133 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 134 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 135 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 136 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 137 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 138 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 139 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 140 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 141 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 142 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 143 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 144 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

20 basic blocks, 28 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 0.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(16){ }d-1(20){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(39){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]

Successors:  2 (fallthru)
;; lr  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118

Successors:  3 (fallthru) 19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 94 95 96 97 119 120 121 122 123

Successors:  4 (fallthru) 5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  3 (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 93

Successors:  5 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  3 4 (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 89 90 91 92 124 125 126

Successors:  6 (fallthru) 7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88

Successors:  7 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5 6 (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 84 85 86 87 127 128 129

Successors:  8 (fallthru) 9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  7 (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 83

Successors:  9 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 0.
Predecessors:  7 8 (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 81 82 130 131 132

Successors:  10 (fallthru) 11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  9 (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78

Successors:  11 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  9 10 (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 133 134 135

Successors:  12 (fallthru) 13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  11 (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73

Successors:  13 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  11 12 (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 72 136 137 138

Successors:  14 (fallthru) 15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  13 (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68

Successors:  15 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 0.
Predecessors:  13 14 (fallthru)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 139 140 141

Successors:  16 (fallthru) 17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 0.
Predecessors:  15 (fallthru)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63

Successors:  17 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 0.
Predecessors:  15 16 (fallthru)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 142 143 144

Successors:  18 (fallthru) 19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 0.
Predecessors:  17 (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

Successors:  19 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 19 , prev 18, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  18 (fallthru) 2 17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

Successors:  EXIT [100.0%]  (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 1 , prev 19, loop_depth 0, count 0, freq 0.
Predecessors:  19 [100.0%]  (fallthru)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(6){ }u-1(7){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 20 [frame]
;; lr  def 	

Successors: 
;; lr  out 	


;; Register 58 in 5.
;; Register 59 in 0.
;; Register 60 in 1.
;; Register 61 in 0.
;; Register 62 in 5.
;; Register 63 in 5.
;; Register 64 in 0.
;; Register 65 in 1.
;; Register 66 in 0.
;; Register 67 in 5.
;; Register 68 in 5.
;; Register 69 in 0.
;; Register 70 in 1.
;; Register 71 in 0.
;; Register 72 in 5.
;; Register 73 in 5.
;; Register 74 in 0.
;; Register 75 in 1.
;; Register 76 in 0.
;; Register 77 in 5.
;; Register 78 in 5.
;; Register 79 in 0.
;; Register 80 in 1.
;; Register 81 in 0.
;; Register 82 in 5.
;; Register 83 in 5.
;; Register 84 in 0.
;; Register 85 in 1.
;; Register 86 in 0.
;; Register 87 in 5.
;; Register 88 in 5.
;; Register 89 in 0.
;; Register 90 in 1.
;; Register 91 in 0.
;; Register 92 in 5.
;; Register 93 in 5.
;; Register 94 in 0.
;; Register 95 in 1.
;; Register 96 in 0.
;; Register 97 in 5.
;; Register 98 in 0.
;; Register 99 in 1.
;; Register 100 in 0.
;; Register 101 in 5.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 3.
;; Register 105 in 0.
;; Register 106 in 1.
;; Register 107 in 0.
;; Register 108 in 5.
;; Register 109 in 0.
;; Register 110 in 0.
;; Register 111 in 5.
;; Register 112 in 0.
;; Register 113 in 2.
;; Register 114 in 1.
;; Register 115 in 5.
;; Register 116 in 5.
;; Register 117 in 0.
;; Register 118 in 0.
;; Register 119 in 5.
;; Register 120 in 5.
;; Register 121 in 0.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 124 in 0.
;; Register 125 in 0.
;; Register 126 in 0.
;; Register 127 in 0.
;; Register 128 in 0.
;; Register 129 in 0.
;; Register 130 in 0.
;; Register 131 in 0.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 134 in 0.
;; Register 135 in 0.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 0.
;; Register 139 in 0.
;; Register 140 in 0.
;; Register 141 in 0.
;; Register 142 in 0.
;; Register 143 in 0.
;; Register 144 in 0.


cBotModules::cBotModules(char*, cBot*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags]
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118

;; Pred edge  ENTRY (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 BotModules.cpp:10 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])
        (reg:DI 5 di [ this ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))

(insn 3 2 4 2 BotModules.cpp:10 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 name+0 S8 A64])
        (reg:DI 4 si [ name ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 4 si [ name ])
        (nil)))

(insn 4 3 5 2 BotModules.cpp:10 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 b+0 S8 A64])
        (reg:DI 1 dx [ b ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 1 dx [ b ])
        (nil)))

(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 5 9 2 BotModules.cpp:11 (set (reg/f:DI 106)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 9 8 10 2 BotModules.cpp:11 (set (reg/f:DI 107)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 b+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 10 9 11 2 BotModules.cpp:11 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 106)
                (const_int 16 [0x10])) [0 <variable>.bot+0 S8 A64])
        (reg/f:DI 107)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 107)
        (expr_list:REG_DEAD (reg/f:DI 106)
            (nil))))

(insn 11 10 12 2 BotModules.cpp:12 (set (reg:DI 4 si)
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(insn 12 11 13 2 BotModules.cpp:12 (set (reg:DI 5 di)
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(call_insn 13 12 14 2 BotModules.cpp:12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getcwd") [flags 0x41] <function_decl 0x7fcccd4029c0 getcwd>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 14 13 15 2 BotModules.cpp:12 (set (reg/f:DI 105 [ path.8 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 15 14 16 2 BotModules.cpp:12 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])
        (reg/f:DI 105 [ path.8 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 105 [ path.8 ])
        (nil)))

(insn 16 15 17 2 BotModules.cpp:14 (set (reg:DI 108)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 name+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 17 16 18 2 BotModules.cpp:14 (set (reg:DI 5 di)
        (reg:DI 108)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 108)
        (nil)))

(call_insn/u 18 17 19 2 BotModules.cpp:14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41] <function_decl 0x7fcccd4ec0d0 strlen>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (mem:BLK (scratch) [0 A8]))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 19 18 20 2 BotModules.cpp:14 (set (reg:DI 109)
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 20 19 21 2 BotModules.cpp:14 (set (reg:DI 110)
        (reg:DI 109)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 109)
        (nil)))

(insn 21 20 22 2 BotModules.cpp:14 (set (reg:DI 104 [ D.12934 ])
        (reg:DI 110)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 110)
        (nil)))

(insn 22 21 23 2 BotModules.cpp:14 (set (reg:DI 111)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 23 22 24 2 BotModules.cpp:14 (set (reg:DI 5 di)
        (reg:DI 111)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 111)
        (nil)))

(call_insn/u 24 23 25 2 BotModules.cpp:14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41] <function_decl 0x7fcccd4ec0d0 strlen>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (mem:BLK (scratch) [0 A8]))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 25 24 26 2 BotModules.cpp:14 (set (reg:DI 103 [ D.12935 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 26 25 27 2 BotModules.cpp:14 (parallel [
            (set (reg:DI 102 [ D.12936 ])
                (plus:DI (reg:DI 104 [ D.12934 ])
                    (reg:DI 103 [ D.12935 ])))
            (clobber (reg:CC 17 flags))
        ]) 244 {*adddi_1_rex64} (expr_list:REG_DEAD (reg:DI 104 [ D.12934 ])
        (expr_list:REG_DEAD (reg:DI 103 [ D.12935 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 27 26 28 2 BotModules.cpp:14 (parallel [
            (set (reg:DI 101 [ D.12937 ])
                (plus:DI (reg:DI 102 [ D.12936 ])
                    (const_int 30 [0x1e])))
            (clobber (reg:CC 17 flags))
        ]) 244 {*adddi_1_rex64} (expr_list:REG_DEAD (reg:DI 102 [ D.12936 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 28 27 29 2 BotModules.cpp:14 (set (reg:DI 5 di)
        (reg:DI 101 [ D.12937 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 101 [ D.12937 ])
        (nil)))

(call_insn 29 28 30 2 BotModules.cpp:14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41] <function_decl 0x7fcccd51a0d0 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 30 29 31 2 BotModules.cpp:14 (set (reg/f:DI 112)
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 112)
            (nil))))

(insn 31 30 32 2 BotModules.cpp:14 (set (reg/f:DI 100 [ D.12938 ])
        (reg/f:DI 112)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 112)
        (nil)))

(insn 32 31 33 2 BotModules.cpp:14 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])
        (reg/f:DI 100 [ D.12938 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 100 [ D.12938 ])
        (nil)))

(insn 33 32 34 2 BotModules.cpp:15 (set (reg:DI 113)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 name+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 34 33 35 2 BotModules.cpp:15 (set (reg:DI 114)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 35 34 36 2 BotModules.cpp:15 (set (reg:DI 115)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 36 35 37 2 BotModules.cpp:15 (set (reg:DI 2 cx)
        (reg:DI 113)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 113)
        (nil)))

(insn 37 36 38 2 BotModules.cpp:15 (set (reg:DI 1 dx)
        (reg:DI 114)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 114)
        (nil)))

(insn 38 37 39 2 BotModules.cpp:15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2] <string_cst 0x7fcccca75d20>)) 89 {*movdi_1_rex64} (nil))

(insn 39 38 40 2 BotModules.cpp:15 (set (reg:DI 5 di)
        (reg:DI 115)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 115)
        (nil)))

(insn 40 39 41 2 BotModules.cpp:15 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 41 40 42 2 BotModules.cpp:15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41] <function_decl 0x7fcccd4f7750 sprintf>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_EH_REGION (const_int 0 [0x0])
                            (nil)))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                        (nil)))))))

(insn 42 41 43 2 BotModules.cpp:16 (set (reg:DI 116)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 43 42 44 2 BotModules.cpp:16 (set (reg:SI 4 si)
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 44 43 45 2 BotModules.cpp:16 (set (reg:DI 5 di)
        (reg:DI 116)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 116)
        (nil)))

(call_insn 45 44 46 2 BotModules.cpp:16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlopen") [flags 0x41] <function_decl 0x7fcccd36ec30 dlopen>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
            (nil))))

(insn 46 45 47 2 BotModules.cpp:16 (set (reg/f:DI 99 [ D.12939 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 47 46 48 2 BotModules.cpp:16 (set (reg/f:DI 117)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 48 47 49 2 BotModules.cpp:16 (set (mem/s/f/j:DI (reg/f:DI 117) [0 <variable>.lib+0 S8 A64])
        (reg/f:DI 99 [ D.12939 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 117)
        (expr_list:REG_DEAD (reg/f:DI 99 [ D.12939 ])
            (nil))))

(insn 49 48 50 2 BotModules.cpp:17 (set (reg/f:DI 118)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 50 49 51 2 BotModules.cpp:17 (set (reg/f:DI 98 [ D.12940 ])
        (mem/s/f/j:DI (reg/f:DI 118) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 118)
        (nil)))

(insn 51 50 52 2 BotModules.cpp:17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 98 [ D.12940 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 98 [ D.12940 ])
        (nil)))

(jump_insn 52 51 53 2 BotModules.cpp:17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 225)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2 -> ( 3 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  19

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 94 95 96 97 119 120 121 122 123

;; Pred edge  2 (fallthru)
(note 53 52 54 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 3 BotModules.cpp:18 (set (reg:DI 119)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 55 54 56 3 BotModules.cpp:18 (set (reg:DI 5 di)
        (reg:DI 119)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 119)
        (nil)))

(call_insn 56 55 57 3 BotModules.cpp:18 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41] <function_decl 0x7fcccd50fd00 free>) [0 S1 A8])
        (const_int 0 [0x0])) 601 {*call_0} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 57 56 58 3 BotModules.cpp:19 (set (reg:DI 120)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 58 57 59 3 BotModules.cpp:19 (set (reg:DI 5 di)
        (reg:DI 120)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 120)
        (nil)))

(call_insn 59 58 60 3 BotModules.cpp:19 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41] <function_decl 0x7fcccd50fd00 free>) [0 S1 A8])
        (const_int 0 [0x0])) 601 {*call_0} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 60 59 61 3 BotModules.cpp:20 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(insn 61 60 62 3 BotModules.cpp:21 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(insn 62 61 63 3 BotModules.cpp:22 (set (reg/f:DI 121)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 63 62 64 3 BotModules.cpp:22 (set (reg/f:DI 97 [ D.12941 ])
        (mem/s/f/j:DI (reg/f:DI 121) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 121)
        (nil)))

(insn 64 63 65 3 BotModules.cpp:22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2] <string_cst 0x7fcccca93180>)) 89 {*movdi_1_rex64} (nil))

(insn 65 64 66 3 BotModules.cpp:22 (set (reg:DI 5 di)
        (reg/f:DI 97 [ D.12941 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 97 [ D.12941 ])
        (nil)))

(call_insn 66 65 67 3 BotModules.cpp:22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 67 66 68 3 BotModules.cpp:22 (set (reg/f:DI 96 [ D.12942 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 68 67 69 3 BotModules.cpp:22 (set (reg/f:DI 95 [ D.12943 ])
        (reg/f:DI 96 [ D.12942 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 96 [ D.12942 ])
        (nil)))

(insn 69 68 70 3 BotModules.cpp:22 (set (reg/f:DI 122)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 70 69 71 3 BotModules.cpp:22 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 122)
                (const_int 24 [0x18])) [0 <variable>.channel_message+0 S8 A64])
        (reg/f:DI 95 [ D.12943 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 122)
        (expr_list:REG_DEAD (reg/f:DI 95 [ D.12943 ])
            (nil))))

(insn 71 70 72 3 BotModules.cpp:23 (set (reg/f:DI 123)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 72 71 73 3 BotModules.cpp:23 (set (reg/f:DI 94 [ D.12944 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 123)
                (const_int 24 [0x18])) [0 <variable>.channel_message+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 123)
        (nil)))

(insn 73 72 74 3 BotModules.cpp:23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 94 [ D.12944 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 94 [ D.12944 ])
        (nil)))

(jump_insn 74 73 75 3 BotModules.cpp:23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 93

;; Pred edge  3 (fallthru)
(note 75 74 76 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn 76 75 77 4 BotModules.cpp:23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 77 76 78 4 BotModules.cpp:23 (set (reg/f:DI 93 [ D.12945 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 78 77 79 4 BotModules.cpp:23 (set (reg:DI 5 di)
        (reg/f:DI 93 [ D.12945 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 93 [ D.12945 ])
        (nil)))

(call_insn 79 78 80 4 BotModules.cpp:23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 89 90 91 92 124 125 126

;; Pred edge  3
;; Pred edge  4 (fallthru)
(code_label 80 79 81 5 3 "" [1 uses])

(note 81 80 82 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 82 81 83 5 BotModules.cpp:24 (set (reg/f:DI 124)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 83 82 84 5 BotModules.cpp:24 (set (reg/f:DI 92 [ D.12946 ])
        (mem/s/f/j:DI (reg/f:DI 124) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 124)
        (nil)))

(insn 84 83 85 5 BotModules.cpp:24 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2] <string_cst 0x7fcccca93240>)) 89 {*movdi_1_rex64} (nil))

(insn 85 84 86 5 BotModules.cpp:24 (set (reg:DI 5 di)
        (reg/f:DI 92 [ D.12946 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 92 [ D.12946 ])
        (nil)))

(call_insn 86 85 87 5 BotModules.cpp:24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 87 86 88 5 BotModules.cpp:24 (set (reg/f:DI 91 [ D.12947 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 88 87 89 5 BotModules.cpp:24 (set (reg/f:DI 90 [ D.12948 ])
        (reg/f:DI 91 [ D.12947 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 91 [ D.12947 ])
        (nil)))

(insn 89 88 90 5 BotModules.cpp:24 (set (reg/f:DI 125)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 90 89 91 5 BotModules.cpp:24 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 125)
                (const_int 32 [0x20])) [0 <variable>.channel_notice+0 S8 A64])
        (reg/f:DI 90 [ D.12948 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 125)
        (expr_list:REG_DEAD (reg/f:DI 90 [ D.12948 ])
            (nil))))

(insn 91 90 92 5 BotModules.cpp:25 (set (reg/f:DI 126)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 92 91 93 5 BotModules.cpp:25 (set (reg/f:DI 89 [ D.12949 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 126)
                (const_int 32 [0x20])) [0 <variable>.channel_notice+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 126)
        (nil)))

(insn 93 92 94 5 BotModules.cpp:25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 89 [ D.12949 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 89 [ D.12949 ])
        (nil)))

(jump_insn 94 93 95 5 BotModules.cpp:25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  7

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88

;; Pred edge  5 (fallthru)
(note 95 94 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(call_insn 96 95 97 6 BotModules.cpp:25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 97 96 98 6 BotModules.cpp:25 (set (reg/f:DI 88 [ D.12950 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 98 97 99 6 BotModules.cpp:25 (set (reg:DI 5 di)
        (reg/f:DI 88 [ D.12950 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 88 [ D.12950 ])
        (nil)))

(call_insn 99 98 100 6 BotModules.cpp:25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 84 85 86 87 127 128 129

;; Pred edge  5
;; Pred edge  6 (fallthru)
(code_label 100 99 101 7 4 "" [1 uses])

(note 101 100 102 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 102 101 103 7 BotModules.cpp:26 (set (reg/f:DI 127)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 103 102 104 7 BotModules.cpp:26 (set (reg/f:DI 87 [ D.12951 ])
        (mem/s/f/j:DI (reg/f:DI 127) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 127)
        (nil)))

(insn 104 103 105 7 BotModules.cpp:26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2] <string_cst 0x7fcccca93300>)) 89 {*movdi_1_rex64} (nil))

(insn 105 104 106 7 BotModules.cpp:26 (set (reg:DI 5 di)
        (reg/f:DI 87 [ D.12951 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 87 [ D.12951 ])
        (nil)))

(call_insn 106 105 107 7 BotModules.cpp:26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 107 106 108 7 BotModules.cpp:26 (set (reg/f:DI 86 [ D.12952 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 108 107 109 7 BotModules.cpp:26 (set (reg/f:DI 85 [ D.12953 ])
        (reg/f:DI 86 [ D.12952 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 86 [ D.12952 ])
        (nil)))

(insn 109 108 110 7 BotModules.cpp:26 (set (reg/f:DI 128)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 110 109 111 7 BotModules.cpp:26 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 128)
                (const_int 40 [0x28])) [0 <variable>.channel_action+0 S8 A64])
        (reg/f:DI 85 [ D.12953 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 128)
        (expr_list:REG_DEAD (reg/f:DI 85 [ D.12953 ])
            (nil))))

(insn 111 110 112 7 BotModules.cpp:27 (set (reg/f:DI 129)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 112 111 113 7 BotModules.cpp:27 (set (reg/f:DI 84 [ D.12954 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 129)
                (const_int 40 [0x28])) [0 <variable>.channel_action+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 129)
        (nil)))

(insn 113 112 114 7 BotModules.cpp:27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 84 [ D.12954 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 84 [ D.12954 ])
        (nil)))

(jump_insn 114 113 115 7 BotModules.cpp:27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 83

;; Pred edge  7 (fallthru)
(note 115 114 116 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(call_insn 116 115 117 8 BotModules.cpp:27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 117 116 118 8 BotModules.cpp:27 (set (reg/f:DI 83 [ D.12955 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 118 117 119 8 BotModules.cpp:27 (set (reg:DI 5 di)
        (reg/f:DI 83 [ D.12955 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 83 [ D.12955 ])
        (nil)))

(call_insn 119 118 120 8 BotModules.cpp:27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 81 82 130 131 132

;; Pred edge  7
;; Pred edge  8 (fallthru)
(code_label 120 119 121 9 5 "" [1 uses])

(note 121 120 122 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 122 121 123 9 BotModules.cpp:28 (set (reg/f:DI 130)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 123 122 124 9 BotModules.cpp:28 (set (reg/f:DI 82 [ D.12956 ])
        (mem/s/f/j:DI (reg/f:DI 130) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 130)
        (nil)))

(insn 124 123 125 9 BotModules.cpp:28 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2] <string_cst 0x7fcccca933c0>)) 89 {*movdi_1_rex64} (nil))

(insn 125 124 126 9 BotModules.cpp:28 (set (reg:DI 5 di)
        (reg/f:DI 82 [ D.12956 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 82 [ D.12956 ])
        (nil)))

(call_insn 126 125 127 9 BotModules.cpp:28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 127 126 128 9 BotModules.cpp:28 (set (reg/f:DI 81 [ D.12957 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 128 127 129 9 BotModules.cpp:28 (set (reg/f:DI 80 [ D.12958 ])
        (reg/f:DI 81 [ D.12957 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 81 [ D.12957 ])
        (nil)))

(insn 129 128 130 9 BotModules.cpp:28 (set (reg/f:DI 131)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 130 129 131 9 BotModules.cpp:28 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 131)
                (const_int 48 [0x30])) [0 <variable>.channel_ctcp+0 S8 A64])
        (reg/f:DI 80 [ D.12958 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 131)
        (expr_list:REG_DEAD (reg/f:DI 80 [ D.12958 ])
            (nil))))

(insn 131 130 132 9 BotModules.cpp:29 (set (reg/f:DI 132)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 132 131 133 9 BotModules.cpp:29 (set (reg/f:DI 79 [ D.12959 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 132)
                (const_int 48 [0x30])) [0 <variable>.channel_ctcp+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 132)
        (nil)))

(insn 133 132 134 9 BotModules.cpp:29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 79 [ D.12959 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 79 [ D.12959 ])
        (nil)))

(jump_insn 134 133 135 9 BotModules.cpp:29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 140)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  11

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78

;; Pred edge  9 (fallthru)
(note 135 134 136 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(call_insn 136 135 137 10 BotModules.cpp:29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 137 136 138 10 BotModules.cpp:29 (set (reg/f:DI 78 [ D.12960 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 138 137 139 10 BotModules.cpp:29 (set (reg:DI 5 di)
        (reg/f:DI 78 [ D.12960 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 78 [ D.12960 ])
        (nil)))

(call_insn 139 138 140 10 BotModules.cpp:29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 133 134 135

;; Pred edge  9
;; Pred edge  10 (fallthru)
(code_label 140 139 141 11 6 "" [1 uses])

(note 141 140 142 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 142 141 143 11 BotModules.cpp:31 (set (reg/f:DI 133)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 143 142 144 11 BotModules.cpp:31 (set (reg/f:DI 77 [ D.12961 ])
        (mem/s/f/j:DI (reg/f:DI 133) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 133)
        (nil)))

(insn 144 143 145 11 BotModules.cpp:31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 145 144 146 11 BotModules.cpp:31 (set (reg:DI 5 di)
        (reg/f:DI 77 [ D.12961 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 77 [ D.12961 ])
        (nil)))

(call_insn 146 145 147 11 BotModules.cpp:31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 147 146 148 11 BotModules.cpp:31 (set (reg/f:DI 76 [ D.12962 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 148 147 149 11 BotModules.cpp:31 (set (reg/f:DI 75 [ D.12963 ])
        (reg/f:DI 76 [ D.12962 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 76 [ D.12962 ])
        (nil)))

(insn 149 148 150 11 BotModules.cpp:31 (set (reg/f:DI 134)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 150 149 151 11 BotModules.cpp:31 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 134)
                (const_int 56 [0x38])) [0 <variable>.private_message+0 S8 A64])
        (reg/f:DI 75 [ D.12963 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 134)
        (expr_list:REG_DEAD (reg/f:DI 75 [ D.12963 ])
            (nil))))

(insn 151 150 152 11 BotModules.cpp:32 (set (reg/f:DI 135)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 152 151 153 11 BotModules.cpp:32 (set (reg/f:DI 74 [ D.12964 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 135)
                (const_int 56 [0x38])) [0 <variable>.private_message+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 135)
        (nil)))

(insn 153 152 154 11 BotModules.cpp:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 74 [ D.12964 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 74 [ D.12964 ])
        (nil)))

(jump_insn 154 153 155 11 BotModules.cpp:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 160)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)
;; Succ edge  13

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73

;; Pred edge  11 (fallthru)
(note 155 154 156 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(call_insn 156 155 157 12 BotModules.cpp:32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 157 156 158 12 BotModules.cpp:32 (set (reg/f:DI 73 [ D.12965 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 158 157 159 12 BotModules.cpp:32 (set (reg:DI 5 di)
        (reg/f:DI 73 [ D.12965 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 73 [ D.12965 ])
        (nil)))

(call_insn 159 158 160 12 BotModules.cpp:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 72 136 137 138

;; Pred edge  11
;; Pred edge  12 (fallthru)
(code_label 160 159 161 13 7 "" [1 uses])

(note 161 160 162 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 162 161 163 13 BotModules.cpp:33 (set (reg/f:DI 136)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 163 162 164 13 BotModules.cpp:33 (set (reg/f:DI 72 [ D.12966 ])
        (mem/s/f/j:DI (reg/f:DI 136) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 136)
        (nil)))

(insn 164 163 165 13 BotModules.cpp:33 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 165 164 166 13 BotModules.cpp:33 (set (reg:DI 5 di)
        (reg/f:DI 72 [ D.12966 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 72 [ D.12966 ])
        (nil)))

(call_insn 166 165 167 13 BotModules.cpp:33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 167 166 168 13 BotModules.cpp:33 (set (reg/f:DI 71 [ D.12967 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 168 167 169 13 BotModules.cpp:33 (set (reg/f:DI 70 [ D.12968 ])
        (reg/f:DI 71 [ D.12967 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 71 [ D.12967 ])
        (nil)))

(insn 169 168 170 13 BotModules.cpp:33 (set (reg/f:DI 137)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 170 169 171 13 BotModules.cpp:33 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 137)
                (const_int 64 [0x40])) [0 <variable>.private_notice+0 S8 A64])
        (reg/f:DI 70 [ D.12968 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 137)
        (expr_list:REG_DEAD (reg/f:DI 70 [ D.12968 ])
            (nil))))

(insn 171 170 172 13 BotModules.cpp:34 (set (reg/f:DI 138)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 172 171 173 13 BotModules.cpp:34 (set (reg/f:DI 69 [ D.12969 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 138)
                (const_int 64 [0x40])) [0 <variable>.private_notice+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 138)
        (nil)))

(insn 173 172 174 13 BotModules.cpp:34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 69 [ D.12969 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 69 [ D.12969 ])
        (nil)))

(jump_insn 174 173 175 13 BotModules.cpp:34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 180)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 (fallthru)
;; Succ edge  15

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68

;; Pred edge  13 (fallthru)
(note 175 174 176 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(call_insn 176 175 177 14 BotModules.cpp:34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 177 176 178 14 BotModules.cpp:34 (set (reg/f:DI 68 [ D.12970 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 178 177 179 14 BotModules.cpp:34 (set (reg:DI 5 di)
        (reg/f:DI 68 [ D.12970 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 68 [ D.12970 ])
        (nil)))

(call_insn 179 178 180 14 BotModules.cpp:34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 14 -> ( 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15 (fallthru)

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 139 140 141

;; Pred edge  13
;; Pred edge  14 (fallthru)
(code_label 180 179 181 15 8 "" [1 uses])

(note 181 180 182 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 182 181 183 15 BotModules.cpp:35 (set (reg/f:DI 139)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 183 182 184 15 BotModules.cpp:35 (set (reg/f:DI 67 [ D.12971 ])
        (mem/s/f/j:DI (reg/f:DI 139) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 139)
        (nil)))

(insn 184 183 185 15 BotModules.cpp:35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 185 184 186 15 BotModules.cpp:35 (set (reg:DI 5 di)
        (reg/f:DI 67 [ D.12971 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 67 [ D.12971 ])
        (nil)))

(call_insn 186 185 187 15 BotModules.cpp:35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 187 186 188 15 BotModules.cpp:35 (set (reg/f:DI 66 [ D.12972 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 188 187 189 15 BotModules.cpp:35 (set (reg/f:DI 65 [ D.12973 ])
        (reg/f:DI 66 [ D.12972 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 66 [ D.12972 ])
        (nil)))

(insn 189 188 190 15 BotModules.cpp:35 (set (reg/f:DI 140)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 190 189 191 15 BotModules.cpp:35 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 140)
                (const_int 72 [0x48])) [0 <variable>.private_action+0 S8 A64])
        (reg/f:DI 65 [ D.12973 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 140)
        (expr_list:REG_DEAD (reg/f:DI 65 [ D.12973 ])
            (nil))))

(insn 191 190 192 15 BotModules.cpp:36 (set (reg/f:DI 141)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 192 191 193 15 BotModules.cpp:36 (set (reg/f:DI 64 [ D.12974 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 141)
                (const_int 72 [0x48])) [0 <variable>.private_action+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))

(insn 193 192 194 15 BotModules.cpp:36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 64 [ D.12974 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 64 [ D.12974 ])
        (nil)))

(jump_insn 194 193 195 15 BotModules.cpp:36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 200)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)
;; Succ edge  17

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63

;; Pred edge  15 (fallthru)
(note 195 194 196 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn 196 195 197 16 BotModules.cpp:36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 197 196 198 16 BotModules.cpp:36 (set (reg/f:DI 63 [ D.12975 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 198 197 199 16 BotModules.cpp:36 (set (reg:DI 5 di)
        (reg/f:DI 63 [ D.12975 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 63 [ D.12975 ])
        (nil)))

(call_insn 199 198 200 16 BotModules.cpp:36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 16 -> ( 17)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)

;; Start of basic block ( 15 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 142 143 144

;; Pred edge  15
;; Pred edge  16 (fallthru)
(code_label 200 199 201 17 9 "" [1 uses])

(note 201 200 202 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 202 201 203 17 BotModules.cpp:37 (set (reg/f:DI 142)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 203 202 204 17 BotModules.cpp:37 (set (reg/f:DI 62 [ D.12976 ])
        (mem/s/f/j:DI (reg/f:DI 142) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 142)
        (nil)))

(insn 204 203 205 17 BotModules.cpp:37 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 205 204 206 17 BotModules.cpp:37 (set (reg:DI 5 di)
        (reg/f:DI 62 [ D.12976 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 62 [ D.12976 ])
        (nil)))

(call_insn 206 205 207 17 BotModules.cpp:37 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 207 206 208 17 BotModules.cpp:37 (set (reg/f:DI 61 [ D.12977 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 208 207 209 17 BotModules.cpp:37 (set (reg/f:DI 60 [ D.12978 ])
        (reg/f:DI 61 [ D.12977 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 61 [ D.12977 ])
        (nil)))

(insn 209 208 210 17 BotModules.cpp:37 (set (reg/f:DI 143)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 210 209 211 17 BotModules.cpp:37 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 143)
                (const_int 80 [0x50])) [0 <variable>.private_ctcp+0 S8 A64])
        (reg/f:DI 60 [ D.12978 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 143)
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.12978 ])
            (nil))))

(insn 211 210 212 17 BotModules.cpp:38 (set (reg/f:DI 144)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 212 211 213 17 BotModules.cpp:38 (set (reg/f:DI 59 [ D.12979 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 144)
                (const_int 80 [0x50])) [0 <variable>.private_ctcp+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 144)
        (nil)))

(insn 213 212 214 17 BotModules.cpp:38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 59 [ D.12979 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 59 [ D.12979 ])
        (nil)))

(jump_insn 214 213 215 17 BotModules.cpp:38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 225)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 (fallthru)
;; Succ edge  19

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  17 (fallthru)
(note 215 214 216 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(call_insn 216 215 217 18 BotModules.cpp:38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 217 216 218 18 BotModules.cpp:38 (set (reg/f:DI 58 [ D.12980 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 218 217 219 18 BotModules.cpp:38 (set (reg:DI 5 di)
        (reg/f:DI 58 [ D.12980 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 58 [ D.12980 ])
        (nil)))

(call_insn 219 218 225 18 BotModules.cpp:38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  19 (fallthru)

;; Start of basic block ( 18 2 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  18 (fallthru)
;; Pred edge  2
;; Pred edge  17
(code_label 225 219 228 19 10 "" [2 uses])

(note 228 225 0 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 19 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function cBotModules::cBotModules(char*, cBot*) (_ZN11cBotModulesC2EPcP4cBot)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_overeager:n_basic_blocks 20 n_edges 28 count 20 (    1)


Pass 0

  Register 58 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 59 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 60 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 61 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 63 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 64 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 66 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 67 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 68 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 69 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 70 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 71 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 72 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 73 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 74 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 76 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 77 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 78 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 79 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 81 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 82 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 83 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 84 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 86 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 87 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 88 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 89 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 91 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 92 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 93 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 94 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 95 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 96 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 97 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 98 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 99 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 100 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 101 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 102 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000
  Register 103 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 104 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 105 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 106 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 107 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 108 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 109 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 110 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 111 costs: AREG:0 DREG:0 CREG:-1000 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 112 costs: AREG:0 DREG:-1000 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 113 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 114 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 115 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 116 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 117 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 118 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:7000
  Register 119 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 120 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 121 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 122 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 123 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 124 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 125 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 126 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 127 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 128 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 129 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 130 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 131 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 132 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 133 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 134 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 135 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 136 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 137 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 138 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 139 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 140 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 141 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 142 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:26000 SSE_REGS:26000 MMX_REGS:26000 FP_TOP_SSE_REGS:26000 FP_SECOND_SSE_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:18000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref DIREG, else GENERAL_REGS
  Register 59 pref GENERAL_REGS or none
  Register 60 pref GENERAL_REGS or none
  Register 61 pref AREG, else GENERAL_REGS
  Register 62 pref DIREG, else GENERAL_REGS
  Register 63 pref DIREG, else GENERAL_REGS
  Register 64 pref GENERAL_REGS or none
  Register 65 pref GENERAL_REGS or none
  Register 66 pref AREG, else GENERAL_REGS
  Register 67 pref DIREG, else GENERAL_REGS
  Register 68 pref DIREG, else GENERAL_REGS
  Register 69 pref GENERAL_REGS or none
  Register 70 pref GENERAL_REGS or none
  Register 71 pref AREG, else GENERAL_REGS
  Register 72 pref DIREG, else GENERAL_REGS
  Register 73 pref DIREG, else GENERAL_REGS
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref AREG, else GENERAL_REGS
  Register 77 pref DIREG, else GENERAL_REGS
  Register 78 pref DIREG, else GENERAL_REGS
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref AREG, else GENERAL_REGS
  Register 82 pref DIREG, else GENERAL_REGS
  Register 83 pref DIREG, else GENERAL_REGS
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref AREG, else GENERAL_REGS
  Register 87 pref DIREG, else GENERAL_REGS
  Register 88 pref DIREG, else GENERAL_REGS
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref AREG, else GENERAL_REGS
  Register 92 pref DIREG, else GENERAL_REGS
  Register 93 pref DIREG, else GENERAL_REGS
  Register 94 pref GENERAL_REGS or none
  Register 95 pref GENERAL_REGS or none
  Register 96 pref AREG, else GENERAL_REGS
  Register 97 pref DIREG, else GENERAL_REGS
  Register 98 pref GENERAL_REGS or none
  Register 99 pref AREG, else GENERAL_REGS
  Register 100 pref GENERAL_REGS or none
  Register 101 pref DIREG, else GENERAL_REGS
  Register 102 pref GENERAL_REGS or none
  Register 103 pref AREG, else GENERAL_REGS
  Register 104 pref AREG, else GENERAL_REGS
  Register 105 pref AREG, else GENERAL_REGS
  Register 106 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref DIREG, else GENERAL_REGS
  Register 109 pref DIREG, else GENERAL_REGS
  Register 110 pref AREG, else GENERAL_REGS
  Register 111 pref CREG, else GENERAL_REGS
  Register 112 pref DREG, else GENERAL_REGS
  Register 113 pref DIREG, else GENERAL_REGS
  Register 114 pref DIREG, else GENERAL_REGS
  Register 115 pref GENERAL_REGS or none
  Register 116 pref GENERAL_REGS or none
  Register 117 pref DIREG, else GENERAL_REGS
  Register 118 pref DIREG, else GENERAL_REGS
  Register 119 pref GENERAL_REGS or none
  Register 120 pref GENERAL_REGS or none
  Register 121 pref GENERAL_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref GENERAL_REGS or none
  Register 124 pref GENERAL_REGS or none
  Register 125 pref GENERAL_REGS or none
  Register 126 pref GENERAL_REGS or none
  Register 127 pref GENERAL_REGS or none
  Register 128 pref GENERAL_REGS or none
  Register 129 pref GENERAL_REGS or none
  Register 130 pref GENERAL_REGS or none
  Register 131 pref GENERAL_REGS or none
  Register 132 pref GENERAL_REGS or none
  Register 133 pref GENERAL_REGS or none
  Register 134 pref GENERAL_REGS or none
  Register 135 pref GENERAL_REGS or none
  Register 136 pref GENERAL_REGS or none
  Register 137 pref GENERAL_REGS or none
  Register 138 pref GENERAL_REGS or none
  Register 139 pref GENERAL_REGS or none
  Register 140 pref GENERAL_REGS or none
  Register 141 pref GENERAL_REGS or none
  Register 142 pref GENERAL_REGS or none
143 registers.

Register 53 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 54 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 55 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 56 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 57 used 0 times across 0 insns; set 0 times; dies in 0 places; FLOAT_INT_SSE_REGS or none; pointer.

Register 58 used 2 times across 2 insns in block 18; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 59 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 60 used 2 times across 3 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 61 used 2 times across 2 insns in block 17; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 62 used 2 times across 3 insns in block 17; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 63 used 2 times across 2 insns in block 16; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 64 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 65 used 2 times across 3 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 66 used 2 times across 2 insns in block 15; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 67 used 2 times across 3 insns in block 15; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 68 used 2 times across 2 insns in block 14; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 69 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 70 used 2 times across 3 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 71 used 2 times across 2 insns in block 13; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 72 used 2 times across 3 insns in block 13; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 73 used 2 times across 2 insns in block 12; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 74 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 75 used 2 times across 3 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 76 used 2 times across 2 insns in block 11; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 77 used 2 times across 3 insns in block 11; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 78 used 2 times across 2 insns in block 10; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 79 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 80 used 2 times across 3 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 9; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 82 used 2 times across 3 insns in block 9; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 83 used 2 times across 2 insns in block 8; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 84 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 85 used 2 times across 3 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 86 used 2 times across 2 insns in block 7; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 87 used 2 times across 3 insns in block 7; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 88 used 2 times across 2 insns in block 6; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 89 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 90 used 2 times across 3 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 91 used 2 times across 2 insns in block 5; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 92 used 2 times across 3 insns in block 5; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 93 used 2 times across 2 insns in block 4; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 94 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 95 used 2 times across 3 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 96 used 2 times across 2 insns in block 3; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 97 used 2 times across 3 insns in block 3; set 1 time; pref DIREG, else GENERAL_REGS; pointer.

Register 98 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 99 used 2 times across 3 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 100 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 101 used 2 times across 2 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 102 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 103 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS.

Register 104 used 2 times across 6 insns in block 2; set 1 time; crosses 1 call; crosses call with 1 frequency; pref AREG, else GENERAL_REGS.

Register 105 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 106 used 2 times across 3 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 107 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 108 used 2 times across 2 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 109 used 2 times across 2 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 110 used 2 times across 2 insns in block 2; set 1 time; pref AREG, else GENERAL_REGS; pointer.

Register 111 used 2 times across 4 insns in block 2; set 1 time; pref CREG, else GENERAL_REGS.

Register 112 used 2 times across 4 insns in block 2; set 1 time; pref DREG, else GENERAL_REGS.

Register 113 used 2 times across 5 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 114 used 2 times across 3 insns in block 2; set 1 time; pref DIREG, else GENERAL_REGS.

Register 115 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 116 used 2 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none; pointer.

Register 117 used 2 times across 2 insns in block 3; set 1 time; pref DIREG, else GENERAL_REGS.

Register 118 used 2 times across 2 insns in block 3; set 1 time; pref DIREG, else GENERAL_REGS.

Register 119 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 120 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 121 used 2 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none; pointer.

Register 122 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 123 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 124 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 125 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 126 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 127 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none; pointer.

Register 128 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 129 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 130 used 2 times across 2 insns in block 9; set 1 time; GENERAL_REGS or none; pointer.

Register 131 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 132 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 133 used 2 times across 2 insns in block 11; set 1 time; GENERAL_REGS or none; pointer.

Register 134 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 135 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 136 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none; pointer.

Register 137 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 138 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 139 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

Register 140 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 141 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

Register 142 used 2 times across 2 insns in block 17; set 1 time; GENERAL_REGS or none; pointer.

20 basic blocks, 28 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 0.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(16){ }d-1(20){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(39){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]

Successors:  2 (fallthru)
;; lr  out 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116

Successors:  3 (fallthru) 19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  2 (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 94 95 96 97 117 118 119 120 121

Successors:  4 (fallthru) 5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  3 (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 93

Successors:  5 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  3 4 (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 89 90 91 92 122 123 124

Successors:  6 (fallthru) 7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88

Successors:  7 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  5 6 (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 84 85 86 87 125 126 127

Successors:  8 (fallthru) 9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  7 (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 83

Successors:  9 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 0.
Predecessors:  7 8 (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 81 82 128 129 130

Successors:  10 (fallthru) 11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  9 (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78

Successors:  11 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  9 10 (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 131 132 133

Successors:  12 (fallthru) 13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  11 (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73

Successors:  13 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  11 12 (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 72 134 135 136

Successors:  14 (fallthru) 15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  13 (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68

Successors:  15 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 15 , prev 14, next 16, loop_depth 0, count 0, freq 0.
Predecessors:  13 14 (fallthru)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 137 138 139

Successors:  16 (fallthru) 17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 0.
Predecessors:  15 (fallthru)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63

Successors:  17 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 0.
Predecessors:  15 16 (fallthru)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 140 141 142

Successors:  18 (fallthru) 19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 0.
Predecessors:  17 (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

Successors:  19 (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 19 , prev 18, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  18 (fallthru) 2 17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

Successors:  EXIT [100.0%]  (fallthru)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


Basic block 1 , prev 19, loop_depth 0, count 0, freq 0.
Predecessors:  19 [100.0%]  (fallthru)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(6){ }u-1(7){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 20 [frame]
;; lr  def 	

Successors: 
;; lr  out 	


;; Register 58 in 5.
;; Register 59 in 0.
;; Register 60 in 1.
;; Register 61 in 0.
;; Register 62 in 5.
;; Register 63 in 5.
;; Register 64 in 0.
;; Register 65 in 1.
;; Register 66 in 0.
;; Register 67 in 5.
;; Register 68 in 5.
;; Register 69 in 0.
;; Register 70 in 1.
;; Register 71 in 0.
;; Register 72 in 5.
;; Register 73 in 5.
;; Register 74 in 0.
;; Register 75 in 1.
;; Register 76 in 0.
;; Register 77 in 5.
;; Register 78 in 5.
;; Register 79 in 0.
;; Register 80 in 1.
;; Register 81 in 0.
;; Register 82 in 5.
;; Register 83 in 5.
;; Register 84 in 0.
;; Register 85 in 1.
;; Register 86 in 0.
;; Register 87 in 5.
;; Register 88 in 5.
;; Register 89 in 0.
;; Register 90 in 1.
;; Register 91 in 0.
;; Register 92 in 5.
;; Register 93 in 5.
;; Register 94 in 0.
;; Register 95 in 1.
;; Register 96 in 0.
;; Register 97 in 5.
;; Register 98 in 0.
;; Register 99 in 1.
;; Register 100 in 0.
;; Register 101 in 5.
;; Register 102 in 0.
;; Register 103 in 0.
;; Register 104 in 3.
;; Register 105 in 0.
;; Register 106 in 1.
;; Register 107 in 0.
;; Register 108 in 5.
;; Register 109 in 5.
;; Register 110 in 0.
;; Register 111 in 2.
;; Register 112 in 1.
;; Register 113 in 5.
;; Register 114 in 5.
;; Register 115 in 0.
;; Register 116 in 0.
;; Register 117 in 5.
;; Register 118 in 5.
;; Register 119 in 0.
;; Register 120 in 0.
;; Register 121 in 0.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 124 in 0.
;; Register 125 in 0.
;; Register 126 in 0.
;; Register 127 in 0.
;; Register 128 in 0.
;; Register 129 in 0.
;; Register 130 in 0.
;; Register 131 in 0.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 134 in 0.
;; Register 135 in 0.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 0.
;; Register 139 in 0.
;; Register 140 in 0.
;; Register 141 in 0.
;; Register 142 in 0.


cBotModules::cBotModules(char*, cBot*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags]
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116

;; Pred edge  ENTRY (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 BotModules.cpp:10 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])
        (reg:DI 5 di [ this ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 5 di [ this ])
        (nil)))

(insn 3 2 4 2 BotModules.cpp:10 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 name+0 S8 A64])
        (reg:DI 4 si [ name ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 4 si [ name ])
        (nil)))

(insn 4 3 5 2 BotModules.cpp:10 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 b+0 S8 A64])
        (reg:DI 1 dx [ b ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 1 dx [ b ])
        (nil)))

(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 5 9 2 BotModules.cpp:11 (set (reg/f:DI 106)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 9 8 10 2 BotModules.cpp:11 (set (reg/f:DI 107)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 b+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 10 9 11 2 BotModules.cpp:11 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 106)
                (const_int 16 [0x10])) [0 <variable>.bot+0 S8 A64])
        (reg/f:DI 107)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 107)
        (expr_list:REG_DEAD (reg/f:DI 106)
            (nil))))

(insn 11 10 12 2 BotModules.cpp:12 (set (reg:DI 4 si)
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(insn 12 11 13 2 BotModules.cpp:12 (set (reg:DI 5 di)
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(call_insn 13 12 14 2 BotModules.cpp:12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getcwd") [flags 0x41] <function_decl 0x7fcccd4029c0 getcwd>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 14 13 15 2 BotModules.cpp:12 (set (reg/f:DI 105 [ path.8 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 15 14 16 2 BotModules.cpp:12 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])
        (reg/f:DI 105 [ path.8 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 105 [ path.8 ])
        (nil)))

(insn 16 15 17 2 BotModules.cpp:14 (set (reg:DI 108)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 name+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 17 16 18 2 BotModules.cpp:14 (set (reg:DI 5 di)
        (reg:DI 108)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 108)
        (nil)))

(call_insn/u 18 17 19 2 BotModules.cpp:14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41] <function_decl 0x7fcccd4ec0d0 strlen>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (mem:BLK (scratch) [0 A8]))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 19 18 20 2 BotModules.cpp:14 (set (reg:DI 104 [ D.12883 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 20 19 21 2 BotModules.cpp:14 (set (reg:DI 109)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 21 20 22 2 BotModules.cpp:14 (set (reg:DI 5 di)
        (reg:DI 109)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 109)
        (nil)))

(call_insn/u 22 21 23 2 BotModules.cpp:14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41] <function_decl 0x7fcccd4ec0d0 strlen>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (mem:BLK (scratch) [0 A8]))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 23 22 24 2 BotModules.cpp:14 (set (reg:DI 103 [ D.12884 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 24 23 25 2 BotModules.cpp:14 (parallel [
            (set (reg:DI 102 [ D.12885 ])
                (plus:DI (reg:DI 104 [ D.12883 ])
                    (reg:DI 103 [ D.12884 ])))
            (clobber (reg:CC 17 flags))
        ]) 244 {*adddi_1_rex64} (expr_list:REG_DEAD (reg:DI 104 [ D.12883 ])
        (expr_list:REG_DEAD (reg:DI 103 [ D.12884 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 25 24 26 2 BotModules.cpp:14 (parallel [
            (set (reg:DI 101 [ D.12886 ])
                (plus:DI (reg:DI 102 [ D.12885 ])
                    (const_int 30 [0x1e])))
            (clobber (reg:CC 17 flags))
        ]) 244 {*adddi_1_rex64} (expr_list:REG_DEAD (reg:DI 102 [ D.12885 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 26 25 27 2 BotModules.cpp:14 (set (reg:DI 5 di)
        (reg:DI 101 [ D.12886 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 101 [ D.12886 ])
        (nil)))

(call_insn 27 26 28 2 BotModules.cpp:14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41] <function_decl 0x7fcccd51a0d0 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 28 27 29 2 BotModules.cpp:14 (set (reg/f:DI 110)
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 110)
            (nil))))

(insn 29 28 30 2 BotModules.cpp:14 (set (reg/f:DI 100 [ D.12887 ])
        (reg/f:DI 110)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 110)
        (nil)))

(insn 30 29 31 2 BotModules.cpp:14 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])
        (reg/f:DI 100 [ D.12887 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 100 [ D.12887 ])
        (nil)))

(insn 31 30 32 2 BotModules.cpp:15 (set (reg:DI 111)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 name+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 32 31 33 2 BotModules.cpp:15 (set (reg:DI 112)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 33 32 34 2 BotModules.cpp:15 (set (reg:DI 113)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 34 33 35 2 BotModules.cpp:15 (set (reg:DI 2 cx)
        (reg:DI 111)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 111)
        (nil)))

(insn 35 34 36 2 BotModules.cpp:15 (set (reg:DI 1 dx)
        (reg:DI 112)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 112)
        (nil)))

(insn 36 35 37 2 BotModules.cpp:15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2] <string_cst 0x7fcccca75d20>)) 89 {*movdi_1_rex64} (nil))

(insn 37 36 38 2 BotModules.cpp:15 (set (reg:DI 5 di)
        (reg:DI 113)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 113)
        (nil)))

(insn 38 37 39 2 BotModules.cpp:15 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 39 38 40 2 BotModules.cpp:15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41] <function_decl 0x7fcccd4f7750 sprintf>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_EH_REGION (const_int 0 [0x0])
                            (nil)))))))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                        (nil)))))))

(insn 40 39 41 2 BotModules.cpp:16 (set (reg:DI 114)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 41 40 42 2 BotModules.cpp:16 (set (reg:SI 4 si)
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 42 41 43 2 BotModules.cpp:16 (set (reg:DI 5 di)
        (reg:DI 114)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 114)
        (nil)))

(call_insn 43 42 44 2 BotModules.cpp:16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlopen") [flags 0x41] <function_decl 0x7fcccd36ec30 dlopen>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
            (nil))))

(insn 44 43 45 2 BotModules.cpp:16 (set (reg/f:DI 99 [ D.12888 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 45 44 46 2 BotModules.cpp:16 (set (reg/f:DI 115)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 46 45 47 2 BotModules.cpp:16 (set (mem/s/f/j:DI (reg/f:DI 115) [0 <variable>.lib+0 S8 A64])
        (reg/f:DI 99 [ D.12888 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 115)
        (expr_list:REG_DEAD (reg/f:DI 99 [ D.12888 ])
            (nil))))

(insn 47 46 48 2 BotModules.cpp:17 (set (reg/f:DI 116)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 48 47 49 2 BotModules.cpp:17 (set (reg/f:DI 98 [ D.12889 ])
        (mem/s/f/j:DI (reg/f:DI 116) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 116)
        (nil)))

(insn 49 48 50 2 BotModules.cpp:17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 98 [ D.12889 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 98 [ D.12889 ])
        (nil)))

(jump_insn 50 49 51 2 BotModules.cpp:17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 223)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 2 -> ( 3 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  19

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 94 95 96 97 117 118 119 120 121

;; Pred edge  2 (fallthru)
(note 51 50 52 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 3 BotModules.cpp:18 (set (reg:DI 117)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 53 52 54 3 BotModules.cpp:18 (set (reg:DI 5 di)
        (reg:DI 117)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 117)
        (nil)))

(call_insn 54 53 55 3 BotModules.cpp:18 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41] <function_decl 0x7fcccd50fd00 free>) [0 S1 A8])
        (const_int 0 [0x0])) 601 {*call_0} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 55 54 56 3 BotModules.cpp:19 (set (reg:DI 118)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 56 55 57 3 BotModules.cpp:19 (set (reg:DI 5 di)
        (reg:DI 118)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 118)
        (nil)))

(call_insn 57 56 58 3 BotModules.cpp:19 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41] <function_decl 0x7fcccd50fd00 free>) [0 S1 A8])
        (const_int 0 [0x0])) 601 {*call_0} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 58 57 59 3 BotModules.cpp:20 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 libname+0 S8 A64])
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(insn 59 58 60 3 BotModules.cpp:21 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 path+0 S8 A64])
        (const_int 0 [0x0])) 89 {*movdi_1_rex64} (nil))

(insn 60 59 61 3 BotModules.cpp:22 (set (reg/f:DI 119)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 61 60 62 3 BotModules.cpp:22 (set (reg/f:DI 97 [ D.12890 ])
        (mem/s/f/j:DI (reg/f:DI 119) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 119)
        (nil)))

(insn 62 61 63 3 BotModules.cpp:22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2] <string_cst 0x7fcccca93180>)) 89 {*movdi_1_rex64} (nil))

(insn 63 62 64 3 BotModules.cpp:22 (set (reg:DI 5 di)
        (reg/f:DI 97 [ D.12890 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 97 [ D.12890 ])
        (nil)))

(call_insn 64 63 65 3 BotModules.cpp:22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 65 64 66 3 BotModules.cpp:22 (set (reg/f:DI 96 [ D.12891 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 66 65 67 3 BotModules.cpp:22 (set (reg/f:DI 95 [ D.12892 ])
        (reg/f:DI 96 [ D.12891 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 96 [ D.12891 ])
        (nil)))

(insn 67 66 68 3 BotModules.cpp:22 (set (reg/f:DI 120)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 68 67 69 3 BotModules.cpp:22 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 120)
                (const_int 24 [0x18])) [0 <variable>.channel_message+0 S8 A64])
        (reg/f:DI 95 [ D.12892 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 120)
        (expr_list:REG_DEAD (reg/f:DI 95 [ D.12892 ])
            (nil))))

(insn 69 68 70 3 BotModules.cpp:23 (set (reg/f:DI 121)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 70 69 71 3 BotModules.cpp:23 (set (reg/f:DI 94 [ D.12893 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 121)
                (const_int 24 [0x18])) [0 <variable>.channel_message+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 121)
        (nil)))

(insn 71 70 72 3 BotModules.cpp:23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 94 [ D.12893 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 94 [ D.12893 ])
        (nil)))

(jump_insn 72 71 73 3 BotModules.cpp:23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 93

;; Pred edge  3 (fallthru)
(note 73 72 74 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn 74 73 75 4 BotModules.cpp:23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 75 74 76 4 BotModules.cpp:23 (set (reg/f:DI 93 [ D.12894 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 76 75 77 4 BotModules.cpp:23 (set (reg:DI 5 di)
        (reg/f:DI 93 [ D.12894 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 93 [ D.12894 ])
        (nil)))

(call_insn 77 76 78 4 BotModules.cpp:23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 89 90 91 92 122 123 124

;; Pred edge  3
;; Pred edge  4 (fallthru)
(code_label 78 77 79 5 13 "" [1 uses])

(note 79 78 80 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 5 BotModules.cpp:24 (set (reg/f:DI 122)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 81 80 82 5 BotModules.cpp:24 (set (reg/f:DI 92 [ D.12895 ])
        (mem/s/f/j:DI (reg/f:DI 122) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 122)
        (nil)))

(insn 82 81 83 5 BotModules.cpp:24 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2] <string_cst 0x7fcccca93240>)) 89 {*movdi_1_rex64} (nil))

(insn 83 82 84 5 BotModules.cpp:24 (set (reg:DI 5 di)
        (reg/f:DI 92 [ D.12895 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 92 [ D.12895 ])
        (nil)))

(call_insn 84 83 85 5 BotModules.cpp:24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 85 84 86 5 BotModules.cpp:24 (set (reg/f:DI 91 [ D.12896 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 86 85 87 5 BotModules.cpp:24 (set (reg/f:DI 90 [ D.12897 ])
        (reg/f:DI 91 [ D.12896 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 91 [ D.12896 ])
        (nil)))

(insn 87 86 88 5 BotModules.cpp:24 (set (reg/f:DI 123)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 88 87 89 5 BotModules.cpp:24 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 123)
                (const_int 32 [0x20])) [0 <variable>.channel_notice+0 S8 A64])
        (reg/f:DI 90 [ D.12897 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 123)
        (expr_list:REG_DEAD (reg/f:DI 90 [ D.12897 ])
            (nil))))

(insn 89 88 90 5 BotModules.cpp:25 (set (reg/f:DI 124)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 90 89 91 5 BotModules.cpp:25 (set (reg/f:DI 89 [ D.12898 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 124)
                (const_int 32 [0x20])) [0 <variable>.channel_notice+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 124)
        (nil)))

(insn 91 90 92 5 BotModules.cpp:25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 89 [ D.12898 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 89 [ D.12898 ])
        (nil)))

(jump_insn 92 91 93 5 BotModules.cpp:25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 98)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  7

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 88

;; Pred edge  5 (fallthru)
(note 93 92 94 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(call_insn 94 93 95 6 BotModules.cpp:25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 95 94 96 6 BotModules.cpp:25 (set (reg/f:DI 88 [ D.12899 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 96 95 97 6 BotModules.cpp:25 (set (reg:DI 5 di)
        (reg/f:DI 88 [ D.12899 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 88 [ D.12899 ])
        (nil)))

(call_insn 97 96 98 6 BotModules.cpp:25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 84 85 86 87 125 126 127

;; Pred edge  5
;; Pred edge  6 (fallthru)
(code_label 98 97 99 7 14 "" [1 uses])

(note 99 98 100 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 100 99 101 7 BotModules.cpp:26 (set (reg/f:DI 125)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 101 100 102 7 BotModules.cpp:26 (set (reg/f:DI 87 [ D.12900 ])
        (mem/s/f/j:DI (reg/f:DI 125) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 125)
        (nil)))

(insn 102 101 103 7 BotModules.cpp:26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2] <string_cst 0x7fcccca93300>)) 89 {*movdi_1_rex64} (nil))

(insn 103 102 104 7 BotModules.cpp:26 (set (reg:DI 5 di)
        (reg/f:DI 87 [ D.12900 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 87 [ D.12900 ])
        (nil)))

(call_insn 104 103 105 7 BotModules.cpp:26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 105 104 106 7 BotModules.cpp:26 (set (reg/f:DI 86 [ D.12901 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 106 105 107 7 BotModules.cpp:26 (set (reg/f:DI 85 [ D.12902 ])
        (reg/f:DI 86 [ D.12901 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 86 [ D.12901 ])
        (nil)))

(insn 107 106 108 7 BotModules.cpp:26 (set (reg/f:DI 126)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 108 107 109 7 BotModules.cpp:26 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 126)
                (const_int 40 [0x28])) [0 <variable>.channel_action+0 S8 A64])
        (reg/f:DI 85 [ D.12902 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 126)
        (expr_list:REG_DEAD (reg/f:DI 85 [ D.12902 ])
            (nil))))

(insn 109 108 110 7 BotModules.cpp:27 (set (reg/f:DI 127)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 110 109 111 7 BotModules.cpp:27 (set (reg/f:DI 84 [ D.12903 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 127)
                (const_int 40 [0x28])) [0 <variable>.channel_action+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 127)
        (nil)))

(insn 111 110 112 7 BotModules.cpp:27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 84 [ D.12903 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 84 [ D.12903 ])
        (nil)))

(jump_insn 112 111 113 7 BotModules.cpp:27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 118)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 83

;; Pred edge  7 (fallthru)
(note 113 112 114 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(call_insn 114 113 115 8 BotModules.cpp:27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 115 114 116 8 BotModules.cpp:27 (set (reg/f:DI 83 [ D.12904 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 116 115 117 8 BotModules.cpp:27 (set (reg:DI 5 di)
        (reg/f:DI 83 [ D.12904 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 83 [ D.12904 ])
        (nil)))

(call_insn 117 116 118 8 BotModules.cpp:27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 79 80 81 82 128 129 130

;; Pred edge  7
;; Pred edge  8 (fallthru)
(code_label 118 117 119 9 15 "" [1 uses])

(note 119 118 120 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 120 119 121 9 BotModules.cpp:28 (set (reg/f:DI 128)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 121 120 122 9 BotModules.cpp:28 (set (reg/f:DI 82 [ D.12905 ])
        (mem/s/f/j:DI (reg/f:DI 128) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 128)
        (nil)))

(insn 122 121 123 9 BotModules.cpp:28 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2] <string_cst 0x7fcccca933c0>)) 89 {*movdi_1_rex64} (nil))

(insn 123 122 124 9 BotModules.cpp:28 (set (reg:DI 5 di)
        (reg/f:DI 82 [ D.12905 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 82 [ D.12905 ])
        (nil)))

(call_insn 124 123 125 9 BotModules.cpp:28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 125 124 126 9 BotModules.cpp:28 (set (reg/f:DI 81 [ D.12906 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 126 125 127 9 BotModules.cpp:28 (set (reg/f:DI 80 [ D.12907 ])
        (reg/f:DI 81 [ D.12906 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 81 [ D.12906 ])
        (nil)))

(insn 127 126 128 9 BotModules.cpp:28 (set (reg/f:DI 129)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 128 127 129 9 BotModules.cpp:28 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 129)
                (const_int 48 [0x30])) [0 <variable>.channel_ctcp+0 S8 A64])
        (reg/f:DI 80 [ D.12907 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 129)
        (expr_list:REG_DEAD (reg/f:DI 80 [ D.12907 ])
            (nil))))

(insn 129 128 130 9 BotModules.cpp:29 (set (reg/f:DI 130)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 130 129 131 9 BotModules.cpp:29 (set (reg/f:DI 79 [ D.12908 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 130)
                (const_int 48 [0x30])) [0 <variable>.channel_ctcp+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 130)
        (nil)))

(insn 131 130 132 9 BotModules.cpp:29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 79 [ D.12908 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 79 [ D.12908 ])
        (nil)))

(jump_insn 132 131 133 9 BotModules.cpp:29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  11

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78

;; Pred edge  9 (fallthru)
(note 133 132 134 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(call_insn 134 133 135 10 BotModules.cpp:29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 135 134 136 10 BotModules.cpp:29 (set (reg/f:DI 78 [ D.12909 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 136 135 137 10 BotModules.cpp:29 (set (reg:DI 5 di)
        (reg/f:DI 78 [ D.12909 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 78 [ D.12909 ])
        (nil)))

(call_insn 137 136 138 10 BotModules.cpp:29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 76 77 131 132 133

;; Pred edge  9
;; Pred edge  10 (fallthru)
(code_label 138 137 139 11 16 "" [1 uses])

(note 139 138 140 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 141 11 BotModules.cpp:31 (set (reg/f:DI 131)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 141 140 142 11 BotModules.cpp:31 (set (reg/f:DI 77 [ D.12910 ])
        (mem/s/f/j:DI (reg/f:DI 131) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 131)
        (nil)))

(insn 142 141 143 11 BotModules.cpp:31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 143 142 144 11 BotModules.cpp:31 (set (reg:DI 5 di)
        (reg/f:DI 77 [ D.12910 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 77 [ D.12910 ])
        (nil)))

(call_insn 144 143 145 11 BotModules.cpp:31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 145 144 146 11 BotModules.cpp:31 (set (reg/f:DI 76 [ D.12911 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 146 145 147 11 BotModules.cpp:31 (set (reg/f:DI 75 [ D.12912 ])
        (reg/f:DI 76 [ D.12911 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 76 [ D.12911 ])
        (nil)))

(insn 147 146 148 11 BotModules.cpp:31 (set (reg/f:DI 132)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 148 147 149 11 BotModules.cpp:31 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 132)
                (const_int 56 [0x38])) [0 <variable>.private_message+0 S8 A64])
        (reg/f:DI 75 [ D.12912 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 132)
        (expr_list:REG_DEAD (reg/f:DI 75 [ D.12912 ])
            (nil))))

(insn 149 148 150 11 BotModules.cpp:32 (set (reg/f:DI 133)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 150 149 151 11 BotModules.cpp:32 (set (reg/f:DI 74 [ D.12913 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 133)
                (const_int 56 [0x38])) [0 <variable>.private_message+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 133)
        (nil)))

(insn 151 150 152 11 BotModules.cpp:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 74 [ D.12913 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 74 [ D.12913 ])
        (nil)))

(jump_insn 152 151 153 11 BotModules.cpp:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)
;; Succ edge  13

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73

;; Pred edge  11 (fallthru)
(note 153 152 154 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(call_insn 154 153 155 12 BotModules.cpp:32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 155 154 156 12 BotModules.cpp:32 (set (reg/f:DI 73 [ D.12914 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 156 155 157 12 BotModules.cpp:32 (set (reg:DI 5 di)
        (reg/f:DI 73 [ D.12914 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 73 [ D.12914 ])
        (nil)))

(call_insn 157 156 158 12 BotModules.cpp:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 69 70 71 72 134 135 136

;; Pred edge  11
;; Pred edge  12 (fallthru)
(code_label 158 157 159 13 17 "" [1 uses])

(note 159 158 160 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 160 159 161 13 BotModules.cpp:33 (set (reg/f:DI 134)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 161 160 162 13 BotModules.cpp:33 (set (reg/f:DI 72 [ D.12915 ])
        (mem/s/f/j:DI (reg/f:DI 134) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 134)
        (nil)))

(insn 162 161 163 13 BotModules.cpp:33 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 163 162 164 13 BotModules.cpp:33 (set (reg:DI 5 di)
        (reg/f:DI 72 [ D.12915 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 72 [ D.12915 ])
        (nil)))

(call_insn 164 163 165 13 BotModules.cpp:33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 165 164 166 13 BotModules.cpp:33 (set (reg/f:DI 71 [ D.12916 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 166 165 167 13 BotModules.cpp:33 (set (reg/f:DI 70 [ D.12917 ])
        (reg/f:DI 71 [ D.12916 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 71 [ D.12916 ])
        (nil)))

(insn 167 166 168 13 BotModules.cpp:33 (set (reg/f:DI 135)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 168 167 169 13 BotModules.cpp:33 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 135)
                (const_int 64 [0x40])) [0 <variable>.private_notice+0 S8 A64])
        (reg/f:DI 70 [ D.12917 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 135)
        (expr_list:REG_DEAD (reg/f:DI 70 [ D.12917 ])
            (nil))))

(insn 169 168 170 13 BotModules.cpp:34 (set (reg/f:DI 136)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 170 169 171 13 BotModules.cpp:34 (set (reg/f:DI 69 [ D.12918 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 136)
                (const_int 64 [0x40])) [0 <variable>.private_notice+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 136)
        (nil)))

(insn 171 170 172 13 BotModules.cpp:34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 69 [ D.12918 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 69 [ D.12918 ])
        (nil)))

(jump_insn 172 171 173 13 BotModules.cpp:34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 178)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 (fallthru)
;; Succ edge  15

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 68

;; Pred edge  13 (fallthru)
(note 173 172 174 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(call_insn 174 173 175 14 BotModules.cpp:34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 175 174 176 14 BotModules.cpp:34 (set (reg/f:DI 68 [ D.12919 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 176 175 177 14 BotModules.cpp:34 (set (reg:DI 5 di)
        (reg/f:DI 68 [ D.12919 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 68 [ D.12919 ])
        (nil)))

(call_insn 177 176 178 14 BotModules.cpp:34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 14 -> ( 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15 (fallthru)

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 64 65 66 67 137 138 139

;; Pred edge  13
;; Pred edge  14 (fallthru)
(code_label 178 177 179 15 18 "" [1 uses])

(note 179 178 180 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 180 179 181 15 BotModules.cpp:35 (set (reg/f:DI 137)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 181 180 182 15 BotModules.cpp:35 (set (reg/f:DI 67 [ D.12920 ])
        (mem/s/f/j:DI (reg/f:DI 137) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 137)
        (nil)))

(insn 182 181 183 15 BotModules.cpp:35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 183 182 184 15 BotModules.cpp:35 (set (reg:DI 5 di)
        (reg/f:DI 67 [ D.12920 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 67 [ D.12920 ])
        (nil)))

(call_insn 184 183 185 15 BotModules.cpp:35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 185 184 186 15 BotModules.cpp:35 (set (reg/f:DI 66 [ D.12921 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 186 185 187 15 BotModules.cpp:35 (set (reg/f:DI 65 [ D.12922 ])
        (reg/f:DI 66 [ D.12921 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 66 [ D.12921 ])
        (nil)))

(insn 187 186 188 15 BotModules.cpp:35 (set (reg/f:DI 138)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 188 187 189 15 BotModules.cpp:35 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 138)
                (const_int 72 [0x48])) [0 <variable>.private_action+0 S8 A64])
        (reg/f:DI 65 [ D.12922 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 138)
        (expr_list:REG_DEAD (reg/f:DI 65 [ D.12922 ])
            (nil))))

(insn 189 188 190 15 BotModules.cpp:36 (set (reg/f:DI 139)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 190 189 191 15 BotModules.cpp:36 (set (reg/f:DI 64 [ D.12923 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 139)
                (const_int 72 [0x48])) [0 <variable>.private_action+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 139)
        (nil)))

(insn 191 190 192 15 BotModules.cpp:36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 64 [ D.12923 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 64 [ D.12923 ])
        (nil)))

(jump_insn 192 191 193 15 BotModules.cpp:36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)
;; Succ edge  17

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63

;; Pred edge  15 (fallthru)
(note 193 192 194 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn 194 193 195 16 BotModules.cpp:36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 195 194 196 16 BotModules.cpp:36 (set (reg/f:DI 63 [ D.12924 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 196 195 197 16 BotModules.cpp:36 (set (reg:DI 5 di)
        (reg/f:DI 63 [ D.12924 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 63 [ D.12924 ])
        (nil)))

(call_insn 197 196 198 16 BotModules.cpp:36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 16 -> ( 17)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)

;; Start of basic block ( 15 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 140 141 142

;; Pred edge  15
;; Pred edge  16 (fallthru)
(code_label 198 197 199 17 19 "" [1 uses])

(note 199 198 200 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 200 199 201 17 BotModules.cpp:37 (set (reg/f:DI 140)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 201 200 202 17 BotModules.cpp:37 (set (reg/f:DI 62 [ D.12925 ])
        (mem/s/f/j:DI (reg/f:DI 140) [0 <variable>.lib+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 140)
        (nil)))

(insn 202 201 203 17 BotModules.cpp:37 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2] <string_cst 0x7fcccca93480>)) 89 {*movdi_1_rex64} (nil))

(insn 203 202 204 17 BotModules.cpp:37 (set (reg:DI 5 di)
        (reg/f:DI 62 [ D.12925 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 62 [ D.12925 ])
        (nil)))

(call_insn 204 203 205 17 BotModules.cpp:37 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlsym") [flags 0x41] <function_decl 0x7fcccd36edd0 dlsym>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 205 204 206 17 BotModules.cpp:37 (set (reg/f:DI 61 [ D.12926 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 206 205 207 17 BotModules.cpp:37 (set (reg/f:DI 60 [ D.12927 ])
        (reg/f:DI 61 [ D.12926 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 61 [ D.12926 ])
        (nil)))

(insn 207 206 208 17 BotModules.cpp:37 (set (reg/f:DI 141)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 208 207 209 17 BotModules.cpp:37 (set (mem/s/f/j:DI (plus:DI (reg/f:DI 141)
                (const_int 80 [0x50])) [0 <variable>.private_ctcp+0 S8 A64])
        (reg/f:DI 60 [ D.12927 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 141)
        (expr_list:REG_DEAD (reg/f:DI 60 [ D.12927 ])
            (nil))))

(insn 209 208 210 17 BotModules.cpp:38 (set (reg/f:DI 142)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 this+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 210 209 211 17 BotModules.cpp:38 (set (reg/f:DI 59 [ D.12928 ])
        (mem/s/f/j:DI (plus:DI (reg/f:DI 142)
                (const_int 80 [0x50])) [0 <variable>.private_ctcp+0 S8 A64])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 142)
        (nil)))

(insn 211 210 212 17 BotModules.cpp:38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 59 [ D.12928 ])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (expr_list:REG_DEAD (reg/f:DI 59 [ D.12928 ])
        (nil)))

(jump_insn 212 211 213 17 BotModules.cpp:38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 223)
            (pc))) 579 {*jcc_1} (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 (fallthru)
;; Succ edge  19

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  17 (fallthru)
(note 213 212 214 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(call_insn 214 213 215 18 BotModules.cpp:38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dlerror") [flags 0x41] <function_decl 0x7fcccd3ef0d0 dlerror>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 215 214 216 18 BotModules.cpp:38 (set (reg/f:DI 58 [ D.12929 ])
        (reg:DI 0 ax)) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 216 215 217 18 BotModules.cpp:38 (set (reg:DI 5 di)
        (reg/f:DI 58 [ D.12929 ])) 89 {*movdi_1_rex64} (expr_list:REG_DEAD (reg/f:DI 58 [ D.12929 ])
        (nil)))

(call_insn 217 216 223 18 BotModules.cpp:38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41] <function_decl 0x7fcccd4f5c30 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 843 {*call_value_0_rex64} (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  19 (fallthru)

;; Start of basic block ( 18 2 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  18 (fallthru)
;; Pred edge  2
;; Pred edge  17
(code_label 223 217 226 19 20 "" [2 uses])

(note 226 223 0 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 19 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

